//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input System/weaponactions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Weaponactions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Weaponactions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""weaponactions"",
    ""maps"": [
        {
            ""name"": ""weapon action"",
            ""id"": ""328282a7-41a1-46c2-9d22-bba6e7b84f74"",
            ""actions"": [
                {
                    ""name"": ""melee"",
                    ""type"": ""Button"",
                    ""id"": ""9d90e401-a196-4781-be74-a1ca2e32b0dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""special 1"",
                    ""type"": ""Button"",
                    ""id"": ""963cff22-d04a-43e3-955c-d5412bd5052d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""special 2"",
                    ""type"": ""Button"",
                    ""id"": ""6ff783d5-cca0-40f2-b748-528a5e39055d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""71d57c22-6186-42f2-a279-51eb9fa9882f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""113f22bb-dc30-41f4-850f-e5977dc6876b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""melee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19ffd0e5-bede-4fec-b702-f6566d101bf7"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""special 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbc30e18-3bf8-4e42-ba08-6bb1ce9f3ca6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""special 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef226a8d-35c7-4ca1-9c64-aa3517682d19"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // weapon action
        m_weaponaction = asset.FindActionMap("weapon action", throwIfNotFound: true);
        m_weaponaction_melee = m_weaponaction.FindAction("melee", throwIfNotFound: true);
        m_weaponaction_special1 = m_weaponaction.FindAction("special 1", throwIfNotFound: true);
        m_weaponaction_special2 = m_weaponaction.FindAction("special 2", throwIfNotFound: true);
        m_weaponaction_Switch = m_weaponaction.FindAction("Switch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // weapon action
    private readonly InputActionMap m_weaponaction;
    private List<IWeaponactionActions> m_WeaponactionActionsCallbackInterfaces = new List<IWeaponactionActions>();
    private readonly InputAction m_weaponaction_melee;
    private readonly InputAction m_weaponaction_special1;
    private readonly InputAction m_weaponaction_special2;
    private readonly InputAction m_weaponaction_Switch;
    public struct WeaponactionActions
    {
        private @Weaponactions m_Wrapper;
        public WeaponactionActions(@Weaponactions wrapper) { m_Wrapper = wrapper; }
        public InputAction @melee => m_Wrapper.m_weaponaction_melee;
        public InputAction @special1 => m_Wrapper.m_weaponaction_special1;
        public InputAction @special2 => m_Wrapper.m_weaponaction_special2;
        public InputAction @Switch => m_Wrapper.m_weaponaction_Switch;
        public InputActionMap Get() { return m_Wrapper.m_weaponaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponactionActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponactionActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponactionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponactionActionsCallbackInterfaces.Add(instance);
            @melee.started += instance.OnMelee;
            @melee.performed += instance.OnMelee;
            @melee.canceled += instance.OnMelee;
            @special1.started += instance.OnSpecial1;
            @special1.performed += instance.OnSpecial1;
            @special1.canceled += instance.OnSpecial1;
            @special2.started += instance.OnSpecial2;
            @special2.performed += instance.OnSpecial2;
            @special2.canceled += instance.OnSpecial2;
            @Switch.started += instance.OnSwitch;
            @Switch.performed += instance.OnSwitch;
            @Switch.canceled += instance.OnSwitch;
        }

        private void UnregisterCallbacks(IWeaponactionActions instance)
        {
            @melee.started -= instance.OnMelee;
            @melee.performed -= instance.OnMelee;
            @melee.canceled -= instance.OnMelee;
            @special1.started -= instance.OnSpecial1;
            @special1.performed -= instance.OnSpecial1;
            @special1.canceled -= instance.OnSpecial1;
            @special2.started -= instance.OnSpecial2;
            @special2.performed -= instance.OnSpecial2;
            @special2.canceled -= instance.OnSpecial2;
            @Switch.started -= instance.OnSwitch;
            @Switch.performed -= instance.OnSwitch;
            @Switch.canceled -= instance.OnSwitch;
        }

        public void RemoveCallbacks(IWeaponactionActions instance)
        {
            if (m_Wrapper.m_WeaponactionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponactionActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponactionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponactionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponactionActions @weaponaction => new WeaponactionActions(this);
    public interface IWeaponactionActions
    {
        void OnMelee(InputAction.CallbackContext context);
        void OnSpecial1(InputAction.CallbackContext context);
        void OnSpecial2(InputAction.CallbackContext context);
        void OnSwitch(InputAction.CallbackContext context);
    }
}
